#ifndef BENCHMARK_H
#define BENCHMARK_H

#include "operacja.h"
#include <list>
#include <ctime>
#include <cstdlib>
#include <unistd.h>


using namespace std;

/*!
*\file
*\brief Plik naglowkowy Benchmark.h
*
*Zawiera klasy Obserwowany,Obserwator,Dane oraz PobieraczDanych i ich metody
*/


/*! 
   *\brief Deklaracja klasy Obserwowany
   *
   */

class Obserwowany;

/*! 
   *\brief Deklaracja klasy Dane
   *
   */

class Dane{
 public:
  virtual void update(Obserwowany*) = 0;
};


/*! 
   *\brief Definicja klasy Obserwowany
   *

   */

class Obserwowany
{
 private:
  list <Dane*> lista;
  
 public:
virtual ~Obserwowany(){}

virtual void dodaj(Dane *o)
{
  lista.push_back (o);
}

virtual void usun(Dane *o)
{
  lista.remove (o);
}


virtual void przekaz()
{
  list<Dane*>::iterator it = lista.begin();
  for( ; it != lista.end(); it++){
    (*it)->update(this);
      }
}
};

class Obserwator : public Obserwowany {
 private:
  clock_t czas1;
  clock_t czas2;
  string info;
  
public:
Obserwator();
clock_t getczas1();
clock_t getczas2();
string getinfo();
Ltab Benchmark(Ltab A, int l, int p);
void ustaw(clock_t c1, clock_t c2, string i);
};

class PobieraczDanych: public Dane {
public:
virtual void update(Obserwowany* O) 
{
double t;
Obserwator *d = dynamic_cast<Obserwator *>(O);
if (d) {
cout << "czas1:  " << d->getczas1() << endl;
cout << "czas2:  " << d->getczas2() << endl;
cout << "INFO:   " << d->getinfo() << endl;
t = (double)(d->getczas2()-d->getczas1())/CLOCKS_PER_SEC;
cout << "Czas:  " << endl;
cout << t << endl << endl;	
  }
}
};



 




#endif
